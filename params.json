{"name":"Tutorial-bd","tagline":"","body":"## Banco de dados\r\nNesse tutorial iremos criar a funcionalidade de cadastro de usuários no projeto que estamos desenvolvendo.  \r\nPrimeiramente, temos que adicionar o driver de conexão do Java com o banco de dados.  \r\n  \r\n--\r\n  \r\n## O banco\r\nAgora, com relação ao banco de dados, iremos utilizar o banco que está hospedado na UFSCar mesmo.  \r\nComo toda a turma estará mexendo no mesmo **database** `disciplinabd`, vamos criar um padrão para a tabela que iremos utilizar, sendo que cada aluno deve criar a tabela `<seu_ra>`**_usuario**, onde `<seu_ra>`, deve ser substituído pelo valor do seu **RA**.  \r\nA consulta **SQL** que deve ser executada é:  \r\n  \r\n         CREATE TABLE disciplinabd.dbo.usuario\r\n                     (id int IDENTITY (1,1),\r\n                      username varchar(30) NOT NULL,\r\n                      email varchar(40) NOT NULL,\r\n                      senha varchar(30) NOT NULL,\r\n                      tipo varchar(20) DEFAULT 'user',\r\n                      UNIQUE (username, email))\r\n  \r\nLembrando, novamente, que `<seu_ra>` deve ser substituído pelo valor do seu **RA**.\r\n  \r\n--\r\n  \r\n## O model\r\nAgora, como nosso model só tem os atributos `usuario` e `tipo`, precisamos criar os atributos para os demais campos que serão gravados.  \r\nPara isso, basta adicionarmos a declaração dos atributos junto a declaração dos demais atributos, dentro da classe **Usuario** que está dentro do pacote **model**.  \r\n  \r\n    private String usuario;\r\n    private String tipo;\r\n    // novos atributos\r\n    private String senha;\r\n    private String email;\r\n  \r\nPara criarmos seus **getters** e **setters**, basta pressionarmos `Alt` + `Insert` > `Getter e Setter`.  \r\nSelecionar todos os campos e clicar em **Gerar**.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img37.png\">](#)  \r\n  \r\n--\r\n  \r\n## Adicionando o driver\r\nAntes de adicionar o  driver ao projeto, devemos baixá-lo. Segue o link de onde ele está disponível.  \r\nhttps://github.com/hugonomura/caronas-servlet/raw/master/Driver.zip  \r\n  \r\nFeito isso, precisamos descompactar os arquivos em qualquer pasta, mas, por uma questão de organização, iremos adicionar ele em uma das pastas do projeto.  \r\nDentro da pasta `src/java`, iremos criar uma pasta chamada **libs**, será onde os arquivos baixados deverão ser descompactados.  \r\nA pasta deverá ficar da seguinte forma:  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img29.png\">](#)  \r\n  \r\nApesar dos arquivos do driver de conexão estarem dentro da pasta do projeto, ainda não conseguimos usá-los. Para que possamos usá-los, devemos adicioná-los as bibliotecas do projeto, da seguinte forma:  \r\n`Botão direito` sobre **Bibliotecas** > `Clique em` **Adicionar JAR / Pasta...**  \r\nEncontre os arquivos e selecione caminho relativo.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img30.png\">](#)  \r\n  \r\nO ideal agora é criar uma classe java, apenas para testar se o nosso projeto consegue conectar ao banco de dados.  \r\nPara fazer isso, vamos criar uma classe dentro de **libs** mesmo.  \r\n  \r\n--\r\n  \r\n## Testando a conexão\r\nPara criar uma nova **classe**, basta clicar com o `Botão direito` sobre o **pacote** `libs` > `Novo` > `Classe Java`.  \r\n  \r\nAltere o nome da classe para `TesteBD`\r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img31.png\">](#)  \r\n  \r\nAgora vamos criar um construtor dessa classe de teste, onde, ao construir um objeto da classe **TesteBD**, iremos realizar o teste da conexão.  \r\nPara isso, basta colar o código abaixo, colocando suas credenciais de acesso ao banco em `String usuario = \"\", senha = \"\";`  \r\n  \r\n    public TesteBD() {\r\n\r\n        try {\r\n            Class.forName(\"com.microsoft.jdbc.sqlserver.SQLServerDriver\").newInstance();\r\n            String conexao = \"jdbc:sqlserver://192.168.12.4:1433;database=disciplinabd\";\r\n            String usuario = \"\", senha = \"\";\r\n            conn = DriverManager.getConnection(conexao, usuario, senha);\r\n            stmt = conn.createStatement();\r\n\r\n            System.out.println(\"Conexão OK!!!\");\r\n\r\n            conn.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Erro\");\r\n        }\r\n\r\n    }\r\n  \r\nComo o acesso está sendo feito de dentro da **UFSCar**, precisamos fazer a conexão utilizando o IP do servidor. (caso o acesso for feito de fora da UFSCar, o endereço é `shelton.sor.ufscar.br`).  \r\nPrecisamos adicionar os seguintes **atributos** para a classe:  \r\n  \r\n    //Objeto que guarda informacoes da conexao com o SGBD.\r\n    private Connection conn;\r\n    //Objeto usado para enviar comandos SQL no SGBD\r\n    private Statement stmt;\r\n  \r\ne também precisamos adicionar os seguintes **imports**.  \r\n  \r\n        import java.sql.Connection;\r\n        import java.sql.DriverManager;\r\n        import java.sql.Statement;\r\n  \r\nPara que possamos testar a nossa conexão, temos que criar um método **main** para que a classe possa ser executada.  \r\n  \r\n    public static void main(String args[]) {\r\n        TesteBD t = new TesteBD();\r\n    }\r\n  \r\nAgora já podemos efetivamente testar a conexão, basta clicar com o `botão direito` sobre a classe que acabamos de criar e selecionar a opção **Executar arquivo**.  \r\nPronto, caso a saída no console seja `Conexão OK!!!`, está tudo funcionando corretamente, caso contrário, será mostrada a pilha de erros.  \r\n  \r\n--\r\n  \r\n# Gerenciando as conexões\r\nIremos gerenciar as conexões utilizando um **Connection Factory**, para isso, devemos criar uma nova classe que iremos chamar de **ConnectionCaronasFactory**.  \r\nDevemos clicar com o `botão direito` sobre **Pacotes de Código-fonte** > **Novo** > **Classe Java**.  \r\n  \r\nAlterem o **Nome da classe** para `ConnectionCaronasFactory`, o **Pacote** para `persistence` e clique em **Finalizar**.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img32.png\">](#)  \r\n  \r\nComo é lançada uma **exception** quando a conexão não é bem sucedida, vamos criar uma classe de exceção chamada **CaronasDAOException**, para isso, basta clicar com o `botão direito` sobre **persistence** > **Novo** > **Classe Java**.  \r\n  \r\nAltere o **Nome da Classe** para `CaronasDAOException` e clique em finalizar.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img33.png\">](#)  \r\n  \r\nDevemos fazer essa classe herdar de **exception** e criar vários construtores, conforme o código abaixo.  \r\n  \r\n        public class CaronasDAOException  extends Exception {\r\n            public CaronasDAOException(){ }\r\n\r\n                public CaronasDAOException(String arg){\r\n                        super(arg);\r\n                }\r\n\r\n                public CaronasDAOException(Throwable arg){\r\n                        super(arg);\r\n                }\r\n\r\n                public CaronasDAOException(String arg,Throwable arg1){\r\n                        super(arg,arg1);\r\n                }\r\n        }\r\n  \r\nAgora, voltando para a nossa classe **ConnectionCaronasFactory**, devemos criar um método que retorna uma conexão para o nosso banco de dados e métodos que fechem essa conexão aberta. O **Connection**, **PreparedStatement** e **ResultSet** possuem o método close.  Vamos criar 3 métodos, sendo que em um recebemos apenas uma instância de **Connection**, no outro instâncias de **Connection** e de **PreparedStatement** e, no outro, instâncias das 3 classes.  \r\nO código para fechar a conexão fica da seguinte forma:  \r\n  \r\n    public static void closeConnection(Connection conn, PreparedStatement ps, ResultSet rs) throws CaronasDAOException {\r\n        close(conn, ps, rs);\r\n    }\r\n\r\n    public static void closeConnection(Connection conn, PreparedStatement ps)\r\n            throws CaronasDAOException {\r\n        close(conn, ps, null);\r\n    }\r\n\r\n    public static void closeConnection(Connection conn)\r\n            throws CaronasDAOException {\r\n        close(conn, null, null);\r\n    }\r\n\r\n    private static void close(Connection conn, PreparedStatement ps, ResultSet rs)\r\n            throws CaronasDAOException {\r\n        try {\r\n            if (rs != null) {\r\n                rs.close();\r\n            }\r\n            if (ps != null) {\r\n                ps.close();\r\n            }\r\n            if (conn != null) {\r\n                conn.close();\r\n            }\r\n        } catch (Exception e) {\r\n            throw new CaronasDAOException(e.getMessage());\r\n        }\r\n    }\r\n  \r\nConforme já testamos anteriormente, para criar o método de obtenção de conexão, basta copiar o código que está em **TesteBD**.  \r\nFicando da seguinte forma, lembrando, novamente, que na linha `String usuario = \"\", senha = \"\";`, devem ser colocadas suas credenciais de acesso ao banco de dados:  \r\n  \r\n    public static Connection getConnection() throws CaronasDAOException {\r\n        try {\r\n            Class.forName(\"com.microsoft.jdbc.sqlserver.SQLServerDriver\").newInstance();\r\n            String conexao = \"jdbc:sqlserver://192.168.12.4:1433;database=disciplinabd\";\r\n            String usuario = \"\", senha = \"\";\r\n            Connection conn = DriverManager.getConnection(conexao, usuario, senha);\r\n            return conn;\r\n        } catch (Exception e) {\r\n            throw new CaronasDAOException(e.getMessage());\r\n        }\r\n    }\r\n  \r\nNão podemos esquecer de adicionar os **imports** para `Connection`, `DriverManager`, `PreparedStatement` e `ResultSet`, adicionando as seguinte linhas no início do arquivo:  \r\n  \r\n    import java.sql.Connection;\r\n    import java.sql.DriverManager;\r\n    import java.sql.PreparedStatement;\r\n    import java.sql.ResultSet;\r\n  \r\n  \r\nCom isso, já conseguimos efetivamente manipular o banco de dados.  \r\n  \r\n--\r\n  \r\n## O DAO\r\nPara criar o DAO, devemos seguir os mesmos passos para a criação de uma classe comum.  \r\n`Botão direito` sobre **persistence** > **Novo** > **Classe Java**.  \r\n  \r\nAltere o **Nome da classe** para `UsuarioDAO` e clique em **Finalizar**.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img34.png\">](#)  \r\n  \r\nComo iremos interagir com o **bean** **Usuario**, devemos fazer o **import** da classe e também de **java.sql**, pois estaremos fazendo operações com o banco de dados.  \r\nBasta adicionar os **imports** no inicio do arquivo.  \r\n  \r\n    import model.Usuario;\r\n    import java.sql.*;\r\n  \r\nNecessitamos também de um atributo de conexão na classe, basta adicionar o atributo dentro da classe:  \r\n  \r\n    private Connection conn;\r\n  \r\nSendo que uma nova conexão é aberta quando **UsuarioDAO** é construido.  \r\n  \r\n    public UsuarioDAO() throws CaronasDAOException{\r\n        this.conn = ConnectionCaronasFactory.getConnection();\r\n    }\r\n  \r\nCom isso feito, já podemos criar o nosso método para salvar o **usuário** no banco de dados.  \r\nVamos criar um **método** chamado `salvar` que irá receber como parâmetro um **usuario** e executar uma atualização na tabela de **usuarios** no banco de dados.  \r\n  \r\n    public void salvar(Usuario u){\r\n        // aqui vai a implementação do método\r\n    }\r\n  \r\nPara executar a consulta SQL, precisamos de uma instância  **PreparedStatement**, que necessita de uma conexão e de uma **string** com a requisição **SQL**.  \r\n  \r\n        PreparedStatement ps;\r\n        String SQL = \"INSERT INTO disciplinabd.dbo.usuario\"\r\n                + \"(username, email, senha) VALUES('\" + \r\n                u.getUsuario() + \"', '\" +\r\n                u.getEmail()+ \"', '\" +\r\n                u.getTipo() + \"')\";\r\n        ps = conn.prepareStatement(SQL);\r\n  \r\nFeito isso, já podemos realizar a inserção dos dados utilizando **SQL**, através do método `executeUpdate`, fica da seguinte forma:  \r\n  \r\n        ps.executeUpdate();\r\n  \r\nComo, tanto a criação de **PreparedStatement**, quanto a execução de **executeUpdate** pode lançar uma exceção do tipo **SQLException**, precisamos adicionar isso na assinatura do nosso método, ficando da seguinte forma:  \r\n  \r\n    public void salvar(Usuario u) throws SQLException{\r\n        PreparedStatement ps;\r\n        String SQL = \"INSERT INTO disciplinabd.dbo.usuario\"\r\n                + \"(usuario, tipo) VALUES('\" + u.getUsuario() + \"', '\" +\r\n                u.getTipo() + \"')\";\r\n        ps = conn.prepareStatement(SQL);\r\n        \r\n        ps.executeUpdate();\r\n    }\r\n  \r\nPronto, já conseguimos fazer inserções no banco de dados.  \r\n  \r\n--  \r\n  \r\n## O servlet\r\nAgora que nosso DAO já está funcionando, vamos criar o **servlet** responsável por receber os dados de cadastro, cadastrar os dados no banco de dados e retornar caso a operação tenha sido efetuada com sucesso.  \r\nBasta seguir os mesmos passos de sempre.  \r\nClique com o `botão direito` sobre o **pacote** **controle** > **Novo** > **Servlet**.  \r\n  \r\nAltere o **Nome da Classe** para `CadastraUsuario` e clique em **Próximo**.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img35.png\">](#)    \r\n  \r\nMarque a opção **Adicionar informações ao descritor de implantação (web.xml)** e clique em **Finalizar**.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img36.png\">](#)    \r\n  \r\nAgora, iremos alterar o método **doPost**, sendo que a primeira coisa que devemos fazer é recuperar as informações do usuário da **view**, adicionando-as a um objeto do tipo **usuario**.  \r\n  \r\n        Usuario u = new Usuario();\r\n        u.setUsuario(request.getParameter(\"username\"));\r\n        u.setTipo(\"user\");\r\n        u.setEmail(request.getParameter(\"email\"));\r\n        u.setSenha(request.getParameter(\"senha\"));\r\n  \r\nAgora, vamos criar um objeto do tipo **UsuarioDAO**, para guardar o usuário **u** que acabamos de recuperar da **view**, da seguinte forma:  \r\n  \r\n        UsuarioDAO uDAO = new UsuarioDAO();\r\n        uDAO.salvar(u);\r\n  \r\nMas como as exceções lançadas pelo **DAO** ainda não foram tratadas, devemos tratá-las agora, da seguinte forma:  \r\n  \r\n        try {\r\n            UsuarioDAO uDAO = new UsuarioDAO();\r\n            uDAO.salvar(u);\r\n        } catch (SQLException ex) {\r\n            Logger.getLogger(CadastraUsuario.class.getName()).log(Level.SEVERE, null, ex);\r\n        } catch (CaronasDAOException ex) {\r\n            Logger.getLogger(CadastraUsuario.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n  \r\nTambém precisamos redirecionar o usuário para a **view** `viewLogado.jsp`, utilizando o método **forward** de **RequestDispatcher**, deixando nosso código da seguinte forma.  \r\n  \r\n        try {\r\n            UsuarioDAO uDAO = new UsuarioDAO();\r\n            uDAO.salvar(u);\r\n            request.setAttribute(\"usuarioBean\",u);\r\n            RequestDispatcher rd = null;\r\n            rd = request.getRequestDispatcher(\"/viewLogado.jsp\");\r\n            rd.forward(request, response);\r\n        } catch (SQLException ex) {\r\n            Logger.getLogger(CadastraUsuario.class.getName()).log(Level.SEVERE, null, ex);\r\n        } catch (CaronasDAOException ex) {\r\n            Logger.getLogger(CadastraUsuario.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n  \r\nPor final, não podemos esquecer de adicionar o **import** de `javax.servlet.RequestDispatcher`  \r\n  \r\n        import javax.servlet.RequestDispatcher;\r\n  \r\nAgora, só falta adicionarmos a **action** e o **mehod** no formulário em **cadastro.jsp**\r\n  \r\nTrocando:  \r\n  \r\n       <form autocomplete=\"on\">\r\n  \r\npor:\r\n  \r\n       <form autocomplete=\"on\" action=\"CadastraUsuario\" method=\"post\">\r\n  \r\nLembrando sempre que, como estamos recuperando os parâmetros da **view**, eles necessitam de uma **name** na **view**.  \r\n  \r\n--\r\n  \r\n## Gerenciando erros\r\nAlgo que podemos fazer é mostrar um página de erro mais amigável para o usuário quando ocorrer uma **exception**.  \r\nPara isso, devemos alterar o arquivo **web.xml**.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img38.png\">](#)    \r\n  \r\nAdicionando seguintes linhas nele, antes de **</web-app>**:  \r\n  \r\n    <error-page>\r\n\t\t<exception-type>java.lang.Throwable</exception-type>\r\n\t\t<location>/error.jsp</location>\r\n    </error-page>\r\n  \r\nOnde **exception-type** é o tipo da `exceção` que será tratada e **location** é para onde a aplicação deverá ir.  \r\nPara criar essa página, também não há segredo, basta clicar com o `botão direito` sobre **Páginas Web** > **Novo** > **JSP**.  \r\nAlterar o **Nome do Arquivo** para `error` e clicar em **Finalizar**.  \r\n[<img src=\"https://raw.github.com/hugonomura/imagens-tutorial/master/img39.png\">](#)    \r\n  \r\nPodemos colar o seguinte conteúdo dentro do arquivo **error.jsp**.  \r\n  \r\n    <!DOCTYPE html>\r\n       <html>\r\n         <head>\r\n           <title>Caronas | Erro</title>\r\n           <meta charset=\"UTF-8\">\r\n           <link rel=\"stylesheet\" type=\"text/css\" href=\"estilo.css\">\r\n           <script src=\"jquery.min.js\"></script>\r\n         </head>\r\n         <body>\r\n           <header class=\"container\">\r\n             <h1 id=\"logo\"><a href=\"index.jsp\">Caronas</a></h1>\r\n             <nav id=\"menu\">\r\n               <ul>\r\n                 <li><a href=\"index.jsp\" class=\"active\">Inicio</a></li>\r\n                 <li><a href=\"cadastro.jsp\">Cadastro</a></li>\r\n               </ul>\r\n             </nav>\r\n           </header>\r\n           <section class=\"container\">\r\n             <article id=\"form\">\r\n               <header>\r\n                 <h1>Erro</h1>\r\n               </header>\r\n               Ops, algo deu errado. :(\r\n             </article>\r\n           </section>\r\n           <footer class=\"container\">\r\n             <p>Desenvolvimento Web - UFSCar Sorocaba - 2013</p>\r\n           </footer>\r\n           <script>\r\n             $(document).ready(function(){\r\n\r\n             });\r\n           </script>\r\n         </body>\r\n       </html>\r\n  \r\nPronto, agora quando ocorrer alguma exception, nossa aplicação será direcionada para essa página.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}